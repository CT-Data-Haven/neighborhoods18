{"version":3,"sources":["img/logo.png","components/utils.js","components/Controls.jsx","components/Stage.jsx","components/DataTable.jsx","components/Profile.jsx","components/Intro.jsx","components/VizContainer.jsx","components/Legend.jsx","components/Choropleth.jsx","components/Chart.jsx","components/Download.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","cityDisplay","bridgeport","new_haven","hartford","stamford","getMappable","meta","filterByKey","indicators","makeTitle","lbl","first","wrds","_","fmt","fmtStr","d","undefined","format","data","key","value","displayIndicator","indicator","length","display","getNhoods","filter","level","map","getProfile","name","locData","makeChoroScale","scheme","nBrks","vals","mapValues","values","sort","brks","ckmeans","slice","scaleThreshold","domain","range","makeBarScale","lvls","uniq","reverse","grays","scaleOrdinal","makeTooltip","val","Controls","props","register","useFormContext","className","Form","Row","Col","lg","md","Group","controlId","Label","Control","as","ref","onChange","cities","i","topics","Stage","type","hdr","long","short","profile","Card","Header","Body","children","ChartStage","dataBy","TableStage","style","DataTable","cols","names","omit","colNames","col","isNumber","dataField","text","formatter","align","classes","tblColumns","Object","keys","selectRow","mode","clickToSelect","onSelect","selected","nhood","hideSelectColumn","id","bootstrap4","hover","condensed","headerClasses","wrapperClasses","bordered","keyField","columns","Profile","rowClasses","row","rowIndex","indexOf","Intro","Alert","variant","href","t","icon","title","VizContainer","tabs","getContent","items","transform","showMore","tabClassName","panelClassName","Legend","console","log","colorscale","scale","labelUpper","labelFormat","label","cityStyle","fillColor","color","weight","pointerEvents","Choropleth","getStyle","feature","properties","opacity","fillOpacity","handleFeature","layer","on","featureHilite","featureUnhilite","bindTooltip","direction","offset","target","setStyle","shp","bbox","geo","b","topojson","getBounds","this","shape","layers","nhoods","objects","city","mesh","a","town","merge","geometries","Map","bounds","zoomSnap","zoomDelta","scrollWheelZoom","TileLayer","url","attribution","subdomains","minZoom","maxZoom","ext","LayerGroup","GeoJSON","onClick","onEachFeature","interactive","React","Component","lblRules","oAccess","rAccess","screenCoordinates","coords","isNaN","small","x","y","dx","dy","Chart","colorNhood","accent","labels","gridDisplay","size","margin","top","right","bottom","left","oAccessor","rAccessor","oPadding","oLabel","projection","responsiveWidth","responsiveHeight","fill","stroke","strokeWidth","pieceHoverAnnotation","annotations","svgAnnotationRules","customClickBehavior","baseMarkProps","transitionDuration","Download","dl","dw","gh","Footer","Heading","year","makeDownloads","sources","source","project","Image","src","alt","shapes","require","App","formMethods","useForm","initValues","topic","useState","setTopic","setCity","setIndicator","setNhood","mapData","topicData","location","keyBy","makeMapData","barData","makeBarData","topicMeta","Container","handleSubmit","formData","e","getValues","cSelect","tSelect","iSelect","prevCity","chart","palette","isSelect","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc4eb663.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9144a510.png\";","import * as _ from 'lodash';\nimport { scaleOrdinal, scaleThreshold } from 'd3-scale';\nimport { ckmeans } from 'simple-statistics';\n// import wordwrap from 'wordwrapjs';\nimport { format } from 'd3-format';\nimport * as topojson from 'topojson-client';\n\nconst cityDisplay = {\n  bridgeport: 'Bridgeport',\n  new_haven: 'New Haven',\n  hartford: 'Hartford / West Hartford',\n  stamford: 'Stamford'\n};\n\nconst getMappable = (meta) => (\n  filterByKey(meta.indicators, 'type', 'm', false)\n);\n\nconst makeTitle = (lbl, first = true) => {\n  const wrds = _.replace(lbl, /_/g, ' ');\n  return first ? _.upperFirst(wrds) : _.startCase(wrds);\n};\n\nconst fmt = (fmtStr) => (\n  (d) => (d === null || d === undefined ? 'N/A' : format(fmtStr)(d))\n);\n\nconst tblColumns = (meta, names, omit = null, sort = false) => {\n  const colNames = _.difference(names, omit);\n\n  const cols = colNames.map((name) => {\n    const col = filterByKey(meta, 'indicator', name);\n    const isNumber = col !== undefined;\n\n    return {\n      dataField: (isNumber ? col.indicator : name),\n      text: (isNumber ? col.display : _.upperFirst(name)),\n      formatter: (isNumber ? fmt(col.format) : null),\n      type: (isNumber ? 'number' : 'string'),\n      align: (isNumber ? 'right' : 'left'),\n      classes: (isNumber ? '' : 'table-header-col'),\n      sort\n    };\n  });\n  return cols;\n};\n\nconst compileHeader = (type) => {\n  const headers = {\n    long: '<%= lbl %> by <%= dataBy %>, <%= location %>',\n    short: '<%= lbl %>, <%= location %>',\n    profile: '<%= lbl %> at a glance, <%= location %>'\n  };\n  return _.template(headers[type]);\n};\n\nconst filterByKey = (data, key, value, first = true) => (\n  first ? _.find(data, { [key]: value }) : _.filter(data, { [key]: value })\n);\n\nconst displayIndicator = (indicators, indicator) => {\n  const meta = filterByKey(indicators, 'indicator', indicator);\n  return _.values(meta).length ? meta.display : '';\n};\n\nconst getNhoods = (data) => (\n  _.chain(data)\n    .filter((d) => _.endsWith(d.level, 'neighborhood'))\n    .map('location')\n    .value()\n);\n\nconst getNonSelect = (data) => (\n  _.chain(data)\n    .filter((d) => !_.endsWith(d.level, 'neighborhood'))\n    .map('location')\n    .value()\n);\n\nconst getProfile = (data, name, meta) => {\n  const locData = filterByKey(data, 'location', name);\n  return locData ? meta.map((d) => ({\n    indicator: d.display,\n    value: fmt(d.format)(locData[d.indicator])\n  })) : [];\n};\n\nconst shpLayer = (shps, idx) => (\n  topojson.feature(shps, shps.objects[idx])\n);\n\nconst getBounds = (geo) => {\n  const b = topojson.bbox(geo);\n  return [[b[1], b[0]], [b[3], b[2]]];\n};\n\nconst makeGeoJson = (shp) => (\n  topojson.feature(shp, shp.objects.city)\n);\n\nconst makeGeoLayers = (shp) => {\n  const nhoods = topojson.feature(shp, shp.objects.city);\n  const mesh = topojson.mesh(shp, shp.objects.city, (a, b) => a.properties.town !== b.properties.town);\n  const merge = topojson.merge(shp, shp.objects.city.geometries);\n\n  return { nhoods, mesh, merge };\n};\n\nconst makeMapData = (topicData, indicator) => (\n  _.chain(topicData)\n    .filter((d) => _.endsWith(d.level, 'neighborhood'))\n    .map((d) => ({\n      name: d.location,\n      value: d[indicator]\n    }))\n    .keyBy('name')\n    .value()\n);\n\nconst makeBarData = (topicData, indicator) => (\n  _.sortBy(topicData, (d) => -d[indicator])\n);\n\nconst makeChoroScale = (data, scheme, nBrks) => {\n  const vals = _.chain(data)\n    .mapValues('value')\n    .values()\n    .sort()\n    .value();\n  if (!vals.length) {\n    return scaleThreshold().domain([0, 1]).range(['#ccc']);\n  } else {\n    const brks = ckmeans(vals, nBrks).map((d) => d[0]).slice(1);\n    return scaleThreshold()\n      .domain(brks)\n      .range(scheme[nBrks]);\n  }\n};\n\nconst makeBarScale = (data, scheme) => {\n  const lvls = _.chain(data)\n    .map('level')\n    .uniq()\n    .sort()\n    .reverse()\n    .value();\n  const grays = _.takeRight(scheme[lvls.length + 3], lvls.length);\n  return scaleOrdinal()\n    .domain(lvls)\n    .range(grays);\n};\n\nconst makeTooltip = (data, name, meta) => {\n  const val = data[name] ? data[name].value : null;\n  return `${ name }: ${ fmt(meta.format)(val) }`;\n};\n\nconst makeDownloads = (city, year = 2018) => ({\n  gh: `https://github.com/CT-Data-Haven/2018acs/blob/master/to_distro/${ city }_acs_basic_neighborhood_${ year }.csv`,\n  dw: `https://data.world/camille86/neighborhoods18/workspace/file?filename=${ city }_acs_basic_neighborhood_${ year }.csv`,\n  dl: `https://raw.githubusercontent.com/CT-Data-Haven/2018acs/master/to_distro/${ city }_acs_basic_neighborhood_${ year }.csv`\n});\n\n\n\nexport {\n  getMappable,\n  makeTitle,\n  tblColumns,\n  compileHeader,\n  displayIndicator,\n  getNhoods,\n  filterByKey,\n  getProfile,\n  getNonSelect,\n  cityDisplay,\n  shpLayer,\n  getBounds,\n  makeGeoJson,\n  makeGeoLayers,\n  makeMapData,\n  makeBarData,\n  makeChoroScale,\n  makeBarScale,\n  makeTooltip,\n  fmt,\n  makeDownloads\n};\n","import React from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\nimport { useFormContext } from 'react-hook-form';\nimport { cityDisplay } from './utils.js';\n\nimport '../styles/Controls.css';\n\nconst Controls = (props) => {\n  const { register } = useFormContext();\n\n  return (\n    <div className='Controls'>\n      <Form>\n        <Row>\n          <Col lg={ 4 } md={ 6 }>\n            <Form.Group controlId='cSelect'>\n              <Form.Label>Select a city</Form.Label>\n              <Form.Control as='select' name='cSelect' className='custom-select' ref={ register } onChange={ props.onChange }>\n                { props.cities.map((d, i) => (\n                  <option key={ `city-${ d }` } value={ d }>{ cityDisplay[d] }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n          </Col>\n\n          { /* spacer */ }\n          <Col lg={ 4 } md={ 6 } className='d-lg-none'></Col>\n\n          <Col lg={ 4 } md={ 6 }>\n            <Form.Group controlId='tSelect'>\n              <Form.Label>Select a topic</Form.Label>\n              <Form.Control as='select' name='tSelect' className='custom-select' ref={ register } onChange={ props.onChange }>\n                { props.topics.map((d, i) => (\n                  <option key={ `topic-${ d }` } value={ d }>{ props.meta[d].display }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n          </Col>\n\n          <Col lg={ 4 } md={ 6 }>\n            <Form.Group controlId='iSelect'>\n              <Form.Label>Select an indicator</Form.Label>\n              <Form.Control as='select' name='iSelect' className='custom-select' ref={ register } onChange={ props.onChange }>\n                { props.indicators.map((d, i) => (\n                  <option key={ `indicator-${ d.indicator }` } value={ d.indicator }>{ d.display }</option>\n                )) }\n              </Form.Control>\n            </Form.Group>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  )\n};\n\nexport default Controls;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { compileHeader } from './utils.js';\n\nimport '../styles/Stage.css';\n\nconst Stage = (props) => {\n  const hdr = compileHeader(props.type)({ ...props });\n\n  return (\n    <Card>\n      <Card.Header as='h3'>\n        { hdr }\n      </Card.Header>\n      <Card.Body>\n        { props.children }\n      </Card.Body>\n    </Card>\n  )\n};\n\nconst ChartStage = (props) => (\n  <div className='Stage ChartStage'>\n    <Stage\n      // lbls={ props.lbls.map((d) => d || makeTitle(d)) }\n      type={ props.type || 'long' }\n      dataBy={ props.dataBy || 'neighborhood' }\n      { ...props }\n    />\n  </div>\n);\n\n\nconst TableStage = (props) => (\n  <div className={ props.style ? 'Stage TableStage ' + props.style : 'Stage TableStage' }>\n    <Stage\n      type={ props.type || 'long' }\n      dataBy={ props.dataBy || 'neighborhood' }\n      { ...props }\n    />\n  </div>\n);\n\n\nexport { ChartStage, TableStage };\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport { tblColumns } from './utils.js';\n\nimport '../styles/DataTable.css';\n\nconst DataTable = (props) => {\n  // const data = React.useContext(DataContext);\n  const data = props.data;\n  // get names of last element in data, since first few (e.g. Connecticut, Hartford) won't have town but neighborhood data points will\n  const cols = tblColumns(props.meta.indicators, Object.keys(data[data.length - 1]), ['level'], true);\n  // const nonselectable = getNonSelect(data);\n  const selectRow = {\n    mode: 'radio',\n    clickToSelect: true,\n    onSelect: props.onSelect,\n    // nonSelectable: nonselectable,\n    selected: [props.nhood],\n    hideSelectColumn: true,\n    // nonSelectableClasses: 'row-no-hover',\n    classes: 'table-info'\n  };\n\n  return (\n    <div className='DataTable' id='datatable'>\n      <BootstrapTable\n        bootstrap4\n        classes='row-hover'\n        hover\n        condensed\n        headerClasses='thead-light'\n        wrapperClasses='table-responsive-xl'\n        bordered={ true }\n        keyField={ 'location' }\n        data={ data }\n        columns={ cols }\n        selectRow={ selectRow }\n      />\n    </div>\n  );\n\n};\n\nexport default DataTable;\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\n\nimport '../styles/Profile.css';\n\nconst Profile = (props) => {\n  // const data = React.useContext(DataContext);\n  const data = props.data;\n\n  const opticAdj = (row, rowIndex) => {\n    if (row.value.indexOf('%') !== -1) {\n      return 'percent';\n    }\n  };\n\n  const cols = [{\n    dataField: 'indicator',\n    text: 'Indicator',\n    classes: 'table-header-col'\n  }, {\n    dataField: 'value',\n    text: 'Value',\n    align: 'right',\n    classes: 'text-right'\n  }];\n\n\n  return (\n    <div className='Profile DataTable' id='profile'>\n      <BootstrapTable\n        bootstrap4\n        classes='table'\n        headerClasses='thead-light'\n        bordered={ false }\n        keyField={ 'indicator' }\n        data={ data }\n        columns={ cols }\n        rowClasses={ opticAdj }\n        wrapperClasses='table-responsive'\n      />\n    </div>\n  )\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nconst text = 'Select a topic and indicator to view either a map or a chart. Clicking a neighborhood on the map, chart, or table will bring up detailed information on that neighborhood. See all neighborhoods in the table below.';\n\nconst Intro = () => (\n\t<div className='Intro'>\n\t\t<Alert variant='light' className='border border-color-info'>\n\t\t\t<p>{ text } For more information, visit DataHaven's <a href=\"http://www.ctdatahaven.org/communities\">Communities</a> page or <a href=\"http://www.ctdatahaven.org\">main website</a>.</p>\n\t\t</Alert>\n\t</div>\n);\n\nexport default Intro;\n","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport Tabs from 'react-responsive-tabs';\n\nimport 'react-responsive-tabs/styles.css';\nimport '../styles/VizContainer.css';\n\nconst makeTitle = (d, t) => (\n  <div><span className='nav-icon'>{ t[d.key].icon }</span>{ t[d.key].title }</div>\n);\n\nconst VizContainer = (props) => {\n  const tabs = props.children.map((d, i) => ({\n    title: makeTitle(d, props.tabs),\n    key: d.key,\n    getContent: () => d\n  }));\n  return (\n    <div className='VizContainer'>\n      <Tabs\n        items={ tabs }\n        transform={ false }\n        showMore={ false }\n        tabClassName='viz-tab-nav'\n        panelClassName='viz-tab-panel'\n      />\n    </div>\n  )\n}\n\nexport default VizContainer;\n","import React from 'react';\nimport { LegendThreshold } from '@vx/legend';\nimport { fmt } from './utils.js';\n\nimport '../styles/Legend.css';\n\nconst Legend = (props) => {\n  console.log(props.colorscale.domain);\n  return (\n    <div className='Legend'>\n      <LegendThreshold\n        scale={ props.colorscale }\n        domain={ [...props.colorscale.domain(), null] }\n        labelUpper=' or higher'\n        labelFormat={ (label) => label ? fmt(props.meta.format)(label) : '' }\n      />\n    </div>\n  )\n};\n\nexport default Legend;\n","import React from 'react';\nimport { Map, TileLayer, GeoJSON, LayerGroup } from 'react-leaflet';\nimport { getBounds, makeGeoLayers, makeTooltip } from './utils.js';\n\nimport Legend from './Legend';\n\n\nimport '../styles/Chart.css';\n\n// events only get bound properly if this is a class component\n\nconst cityStyle = {\n\tfillColor: 'transparent',\n\tcolor: '#333',\n\tweight: 1.5,\n\tpointerEvents: 'none'\n};\n\nexport default class Choropleth extends React.Component {\n\n  getStyle = (feature) => {\n    const name = feature.properties.name;\n    const fillColor = this.props.data[name] ? this.props.colorscale(this.props.data[name].value) : '#ccc';\n    return {\n      fillColor,\n      color: '#555',\n      weight: 0.5,\n      opacity: 1,\n      fillOpacity: 0.75\n    };\n  };\n\n  handleFeature = (feature, layer) => {\n    let name = feature.properties.name;\n    layer\n      .on('mouseover', this.featureHilite)\n      .on('mouseout', this.featureUnhilite);\n    layer.bindTooltip(() => (\n      makeTooltip(this.props.data, name, this.props.meta)),\n      { direction: 'top', offset: [0, -20], className: 'custom-tip' }\n    );\n  };\n\n  featureHilite = ({ target }) => {\n    target.setStyle({\n      fillOpacity: 0.95,\n      weight: 1\n    });\n\n  };\n  featureUnhilite = ({ target }) => {\n    target.setStyle({\n      fillOpacity: 0.75,\n      weight: 0.5\n    });\n  };\n\n\trender() {\n\t\tconst bbox = getBounds(this.props.shape);\n\t  const layers = makeGeoLayers(this.props.shape);\n\t\treturn (\n\t    <div className='Chart Choropleth'>\n\t      <Map\n\t        key={ this.props.city }\n\t        bounds={ bbox }\n\t        zoomSnap={ 0.5 }\n\t        zoomDelta={ 0.5 }\n\t        scrollWheelZoom={ false }\n\t      >\n\t        <TileLayer\n\t          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.{ ext }\"\n\t          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t          subdomains=\"abcd\"\n\t          minZoom={ 10 }\n\t          maxZoom={ 18 }\n\t          ext=\"png\"\n\t          opacity={ 0.4 }\n\t        />\n\t        <LayerGroup key={ this.props.city }>\n\t          <GeoJSON\n\t            data={ layers.nhoods }\n\t            key={ (feature) => feature.properties.name }\n\t            style={ this.getStyle }\n\t            onClick={ this.props.onClick }\n\t            onEachFeature={ this.handleFeature }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<GeoJSON\n\t            data={ layers.mesh }\n\t            style={ cityStyle }\n\t            interactive={ false }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<GeoJSON\n\t            data={ layers.merge }\n\t            style={ cityStyle }\n\t            interactive={ false }\n\t          />\n\t        </LayerGroup>\n\t      </Map>\n\t\t\t\t<Legend\n\t\t\t\t\tcolorscale={ this.props.colorscale }\n\t\t\t\t\tmeta={ this.props.meta }\n\t\t\t\t/>\n\t    </div>\n\t  );\n\t}\n};\n","import React from 'react';\nimport { ResponsiveOrdinalFrame } from 'semiotic';\nimport { fmt } from './utils.js';\n\nimport '../styles/Chart.css';\n\nconst Chart = (props) => {\n  const colorNhood = (d, nhood, scale, accent) => (\n    d[props.oAccess] === nhood ? accent : scale(d.level)\n  );\n  const format = props.meta && props.meta.format ? fmt(props.meta.format) : (d) => d;\n\n  const labels = props.data.map((d) => ({\n    label: format,\n    [props.oAccess]: d[props.oAccess],\n    [props.rAccess]: d[props.rAccess],\n    type: 'bar-label'\n  }));\n\n  return (\n    <div className='Chart'>\n      <ResponsiveOrdinalFrame\n        gridDisplay={ true }\n        data={ props.data }\n        size={ [500, 500] }\n        margin={ { top: 10, right: 10, bottom: 10, left: 160 } }\n        oAccessor={ props.oAccess }\n        rAccessor={ props.rAccess }\n        type='bar'\n        oPadding={ 4 }\n        oLabel={ true }\n        projection='horizontal'\n        responsiveWidth={ true }\n        responsiveHeight={ false }\n        style={ (d) => ({\n          fill: colorNhood(d, props.nhood, props.colorscale, props.accent),\n          stroke: 'white',\n          strokeWidth: '1px',\n          opacity: 0.8\n        }) }\n        pieceHoverAnnotation={ [{\n          type: 'highlight',\n          style: (d) => ({\n            opacity: 1.0,\n            // stroke: '#464e52'\n            stroke: '#3b6c8f'\n          })\n        }] }\n        annotations={ labels }\n        svgAnnotationRules={ (d) => lblRules(d, props.oAccess, props.rAccess, format) }\n        customClickBehavior={ props.onClick }\n        baseMarkProps={ {\n          transitionDuration: { fill: 200 }\n        } }\n      />\n    </div>\n  );\n};\n\n////// check width of bar; if under some amount, positive dx and dark label\nconst lblRules = ({ screenCoordinates, d }, oAccess, rAccess, fmt) => {\n  if (d.type === 'bar-label') {\n    const missing = isNaN(screenCoordinates[0]);\n    const coords = missing ? [0, screenCoordinates[1]] : screenCoordinates;\n    const small = coords[0] < 30;\n    return (\n      <g\n        className={ `direct-label ${ small ? 'dark' : 'light' }` }\n        key={ `lbl-${ d[oAccess] }` }\n        transform={ `translate(${ coords })` }\n      >\n        <text x={ 0 } y={ 0 } dx={ small ? '1.4em' : '-0.3em' } dy={ 3 }>{ fmt(d[rAccess]) }</text>\n      </g>\n    )\n  } else {\n    return null;\n  }\n};\n\nexport default Chart;\n","import React from 'react';\n\nconst Download = (props) => (\n  <div className='Download'>\n    Download data <a href={ props.dl }>here</a> (right-click and 'Save as...'), filter and analyze data online on <a href={ props.dw }>data.world</a> (requires free sign-up), or download/clone from <a href={ props.gh }>GitHub</a> (advanced users).\n  </div>\n);\n\nexport default Download;\n","import React from 'react';\nimport { Image, Alert } from 'react-bootstrap';\nimport Download from './Download';\nimport { makeDownloads } from './utils.js';\n\nimport '../styles/Footer.css';\n\nimport src from '../img/logo.png';\n\nconst text = 'Source: DataHaven analysis (2019) of';\n\nconst Footer = (props) => (\n  <div className='Footer'>\n    <Alert variant='light'>\n      <Alert.Heading>Download this data</Alert.Heading>\n\n      <Download { ...makeDownloads(props.city, 2018) } />\n      {/* </Alert> */}\n      <hr />\n      {/* <Alert variant='light'> */}\n      <Alert.Heading>{ text }</Alert.Heading>\n      <ul>\n        { props.sources.map((d, i) => (\n          <li key={ `source-${ i }` }>\n            <span className='source'>{ d.source }</span> (<span>{ d.year }</span>). <a href={ d.url }>{ d.project }</a>\n          </li>\n        )) }\n      </ul>\n\n      <a href='http://www.ctdatahaven.org'><Image src={ src } id='logo' alt='DataHaven logo' /></a>\n    </Alert>\n  </div>\n);\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useForm, FormContext } from 'react-hook-form';\nimport { schemeGnBu as palette, schemeGreys as grays } from 'd3-scale-chromatic';\nimport { FaChartBar, FaGlobeAmericas } from 'react-icons/fa';\n\nimport Controls from './components/Controls';\nimport { ChartStage, TableStage } from './components/Stage';\nimport DataTable from './components/DataTable';\nimport Profile from './components/Profile';\nimport Intro from './components/Intro';\nimport VizContainer from './components/VizContainer';\nimport Choropleth from './components/Choropleth';\nimport Chart from './components/Chart';\nimport Footer from './components/Footer';\nimport { getMappable, makeTitle, displayIndicator, getNhoods, getProfile, makeMapData, makeBarData, makeChoroScale, makeBarScale, filterByKey } from './components/utils.js';\n\nimport './App.css';\n\nimport meta from './data/nhood_meta_2018.json';\nimport data from './data/nhood_wide_2018.json';\nimport sources from './data/sources.json';\n// import shapes from './shapes/cities_topo_layers.json';\nconst shapes = {\n  new_haven: require('./shapes/new_haven_topo.json'),\n  bridgeport: require('./shapes/bridgeport_topo.json'),\n  hartford: require('./shapes/hartford_topo.json'),\n  stamford: require('./shapes/stamford_topo.json')\n};\n\nconst App = () => {\n  const formMethods = useForm({\n    mode: 'onChange'\n  });\n  const topics = Object.keys(meta);\n  const cities = Object.keys(data);\n\n  const initValues = {\n    topic: topics[0],\n    city: cities[0],\n    // indicator: getMappable(meta, topics[0])[0].indicator\n    indicator: getMappable(meta[topics[0]])[0].indicator\n  };\n\n  // state\n  const [topic, setTopic] = useState(initValues.topic);\n  const [city, setCity] = useState(initValues.city);\n  const [indicator, setIndicator] = useState(initValues.indicator);\n  const [nhood, setNhood] = useState(getNhoods(data[city][topic])[0]);\n\n  // event handling\n  const onChange = (formData, e) => {\n    const { cSelect, tSelect, iSelect } = formMethods.getValues();\n\n    if (e.target.name === 'tSelect') {\n      setIndicator(getMappable(meta[tSelect])[0].indicator);\n    } else {\n      setIndicator(iSelect);\n    }\n\n    setTopic(tSelect);\n    setCity((prevCity) => cSelect);\n\n    if (e.target.name === 'cSelect') {\n      setNhood(getNhoods(data[cSelect][topic])[0]);\n    }\n  };\n\n  const onNhood = (row, isSelect, rowIndex) => {\n    setNhood(row.location);\n  };\n\n  const featureClick = ({ layer }) => {\n    setNhood(layer.feature.properties.name);\n  };\n\n  const barClick = (d) => (\n    setNhood(d.location)\n  );\n\n\n  const mapData = makeMapData(data[city][topic], indicator);\n  const barData = makeBarData(data[city][topic], indicator);\n  const topicMeta = meta[topic];\n\n  return (\n    <div className='App'>\n\n      <Container>\n        <header className='app-header'>\n          <h1>Connecticut Neighborhood Profiles</h1>\n        </header>\n\n        { /* INTRO ROW */ }\n        <Row>\n          <Col>\n            <Intro />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <FormContext { ...formMethods }>\n              <Controls\n                onChange={ formMethods.handleSubmit(onChange) }\n                topics={ topics }\n                indicators={ getMappable(topicMeta) }\n                cities={ cities }\n                meta={ meta }\n              />\n            </FormContext>\n          </Col>\n        </Row>\n\n        <hr />\n\n\n        { /* VIZ */ }\n        <Row>\n          <Col md={ 7 }>\n            <ChartStage\n              location={ makeTitle(city, false) }\n              lbl={ displayIndicator(topicMeta['indicators'], indicator) }\n              type='long'\n            >\n              <VizContainer\n                tabs={{\n                  map: { title: 'Show map', icon: <FaGlobeAmericas /> },\n                  chart: { title: 'Show chart', icon: <FaChartBar /> }\n                }}\n              >\n                <Chart\n                  key='chart'\n                  data={ barData }\n                  oAccess={ 'location' }\n                  rAccess={ indicator }\n                  colorscale={ makeBarScale(barData, grays) }\n                  onClick={ barClick }\n                  meta={ filterByKey(topicMeta['indicators'], 'indicator', indicator) }\n                  accent={ palette[6][5] }\n                  nhood={ nhood }\n                />\n                <Choropleth\n                  key='map'\n                  data={ mapData }\n                  shape={ shapes[city] }\n                  city={ city }\n                  colorscale={ makeChoroScale(mapData, palette, 6) }\n                  onClick={ featureClick }\n                  meta={ filterByKey(topicMeta['indicators'], 'indicator', indicator) }\n                />\n\n              </VizContainer>\n            </ChartStage>\n\n          </Col>\n\n          { /* PROFILE */ }\n          <Col md={ 5 }>\n            <TableStage\n              location={ nhood }\n              lbl={ topicMeta.display }\n              type='profile'\n            >\n              <Profile\n                data={ getProfile(data[city][topic], nhood, topicMeta.indicators) }\n              />\n            </TableStage>\n          </Col>\n        </Row>\n\n        <hr />\n\n        { /* TABLE ROW */ }\n        <Row>\n          <Col>\n            <TableStage\n              location={ makeTitle(city, false) }\n              lbl={ topicMeta.display }\n              type='long'\n            >\n              <DataTable\n                data={ data[city][topic] }\n                meta={ topicMeta }\n                onSelect={ onNhood }\n                nhood={ nhood }\n                sort={ true }\n              />\n            </TableStage>\n          </Col>\n        </Row>\n\n        <hr />\n\n        { /* FOOTER ROW */ }\n        <Row>\n          <Col>\n            <Footer sources={ sources } city={ city } />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/bootstrap.min.css';\nimport 'leaflet/dist/leaflet.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}